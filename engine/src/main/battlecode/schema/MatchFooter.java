// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Sent to end a match.
 */
public final class MatchFooter extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static MatchFooter getRootAsMatchFooter(ByteBuffer _bb) { return getRootAsMatchFooter(_bb, new MatchFooter()); }
  public static MatchFooter getRootAsMatchFooter(ByteBuffer _bb, MatchFooter obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MatchFooter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The ID of the winning team.
   */
  public byte winner() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The number of rounds played.
   */
  public int totalRounds() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createMatchFooter(FlatBufferBuilder builder,
      byte winner,
      int totalRounds) {
    builder.startTable(2);
    MatchFooter.addTotalRounds(builder, totalRounds);
    MatchFooter.addWinner(builder, winner);
    return MatchFooter.endMatchFooter(builder);
  }

  public static void startMatchFooter(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addWinner(FlatBufferBuilder builder, byte winner) { builder.addByte(0, winner, 0); }
  public static void addTotalRounds(FlatBufferBuilder builder, int totalRounds) { builder.addInt(1, totalRounds, 0); }
  public static int endMatchFooter(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MatchFooter get(int j) { return get(new MatchFooter(), j); }
    public MatchFooter get(MatchFooter obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

